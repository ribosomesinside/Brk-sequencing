---
title: "brk-DESeq2"
format: pdf
editor: visual
---

## Upload packagaes

```{r}
#| message: false
library(DESeq2)
library(apeglm)
library(dplyr)
library(tibble)
library(data.table)
library(ggplot2)
library(ggfortify)
library(ggrepel)
library(RColorBrewer)
library(pheatmap)
library(plotly)
library(magrittr)
library(AnnotationDbi)
library(org.Dm.eg.db)
library(writexl)
```

## Load data

```{r}
counts <- fread(file ="rsem.merged.gene_counts.tsv", header=TRUE)
sample_info <- read.delim(file = "Data info/RN23010-sampleinfo_full.txt")

```

## Prepare a matrix for DESeq:

Make first column row names, switch to integers, create a matrix object

```{r}
info<-sample_info %>% column_to_rownames("Sample")
gcounts <- counts[,-2]

dt <- as.data.frame(gcounts) %>%
  column_to_rownames("gene_id") 

dt[,1:9] <- lapply(dt[,1:9], as.integer)

mcountdata <- as.matrix(dt) 

has_rownames(dt)
has_rownames(info)
```

## Matching column order between the tables

```{r}
all(rownames(info) == colnames(mcountdata))
mcountdata_s <- mcountdata[, rownames(info)]
all(rownames(info) == colnames(mcountdata_s))
```

## Creating levels for samples.

It will read the first level to be compared with the rest.

```{r}
info$Group <- factor(info$Group,levels = c("control","sal-brk", "ubi-brk"))
info$Repeat <- as.factor(info$Repeat)
```

# Run deseq.

The object class used by the DESeq2 package to store the read counts and the intermediate estimated quantities during statistical analysis is the **DESeqDataSet**, which will usually be represented in the code here as an object **dds**.

```{r}
dds <- DESeqDataSetFromMatrix(countData = mcountdata_s,
                              colData = info,
                              design = ~Group)
dds <- DESeq(dds)
res <- results(dds)
sum(res$padj < 0.01, na.rm=TRUE)
resultsNames(dds)
```

```{r}
res %>% 
  as.data.frame() %>% 
  filter(padj<0.01) ->dres
```

```{r}
dres$gene = mapIds(
  org.Dm.eg.db,
  keys = rownames(dres),
  column ="SYMBOL",
  keytype = "FLYBASE",
  multiVals = "first"
)
```

## Data shrinkage

```{r}
ubiLFC <- lfcShrink(dds, coef="Group_ubi.brk_vs_control", type="apeglm")
salLFC <- lfcShrink(dds, coef="Group_sal.brk_vs_control", type = "apeglm")

plotMA(res, ylim=c(-4,4))
plotMA(ubiLFC, ylim=c(-4,4))
```

```{r}
ubiLFC %>% 
  as.data.frame() %>% 
  filter(padj<0.01) %>% 
  arrange(log2FoldChange) -> ubiLFC_s
```

## Adding gene names to all data for ubiLFC

```{r}
ubiLFC %>% 
  as.data.frame() %>% 
  arrange(log2FoldChange) -> ubiLFC_all
```

```{r}
ubiLFC_all$gene = mapIds(
  org.Dm.eg.db,
  keys = rownames(ubiLFC_all),
  column ="SYMBOL",
  keytype = "FLYBASE",
  multiVals = "first"
)
```

## Adding gene names to all data for salLFC

```{r}
salLFC %>% 
  as.data.frame() %>% 
  arrange(log2FoldChange) -> salLFC_all
```

```{r}
salLFC_all$gene = mapIds(
  org.Dm.eg.db,
  keys = rownames(salLFC_all),
  column ="SYMBOL",
  keytype = "FLYBASE",
  multiVals = "first"
)
```

```{r}
salLFC_all %>% 
  filter(padj<0.1) %>% 
  arrange(log2FoldChange)
```

## Adding gene names to ubiLFC with padj\<0.01

```{r}
ubiLFC_s$gene = mapIds(
  org.Dm.eg.db,
  keys = rownames(ubiLFC_s),
  column ="SYMBOL",
  keytype = "FLYBASE",
  multiVals = "first"
)
```

```{r}
ubiLFC_s %>% 
  filter(baseMean>100, log2FoldChange<(-0.2)) -> ubi_down001
ubi_down001 %>% rownames_to_column("geneID") ->ubi_down001xl
write_xlsx(ubi_down001xl, "./ubi_down001.xlsx")
```

```{r}
ubiLFC_s %>% 
  filter(baseMean>100, abs(log2FoldChange)>1 & abs(log2FoldChange)<2)
```

## Data transformation

```{r}
vsd <- vst(dds)
head(assay(vsd), 3)

```

## QC

```{r}
plot(
  assay(vsd)[,1],
  assay(vsd)[,8]
)
```

```{r}
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$Group, vsd$Repeat, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors)

```

```{r}
plotPCA(vsd, intgroup="Group")
plotPCA(vsd, intgroup="Group", pcsToUse=2:3)
```

## Normalized counts for some genes

```{r}
plotCounts(dds, gene="FBgn0037248", intgroup="Group") #srl
plotCounts(dds, gene="FBgn0000179", intgroup="Group") #omb norm counts
plotCounts(dds, gene="FBgn0261648", intgroup="Group") #Sal
plotCounts(dds, gene="FBgn0025360", intgroup="Group") #optix
plotCounts(dds, gene="FBgn0011706", intgroup="Group") #reaper
plotCounts(dds, gene="FBgn0003525", intgroup="Group") #string
plotCounts(dds, gene="FBgn0262656", intgroup="Group") #myc
plotCounts(dds, gene="FBgn0039067", intgroup="Group") #wda
plotCounts(dds, gene="FBgn0051865", intgroup="Group") #ada1-1
plotCounts(dds, gene="FBgn0031745", intgroup="Group") #rau-check me
plotCounts(dds, gene="FBgn0035049", intgroup="Group") #rau-check me
plotCounts(dds, gene="FBgn0035049", intgroup="Group") #rau-check me
plotCounts(dds, gene="FBgn0003997", intgroup="Group") 


```

# Checking cell cycle genes

## Upload the table with cell cycle genes first

```{r}
cycle <- fread(file ="cellcycle_genes.csv", header=TRUE)
```

```{r}
ubi_cycle<-subset(ubiLFC_all, gene %in% cycle$gene)
```

```{r}
merge(ubi_cycle, cycle, by="gene") %>% 
  column_to_rownames("gene") %>% 
  filter(padj<0.05, log2FoldChange<(-0.3)) %>% 
  arrange(log2FoldChange) ->ubi_cycle_005
  ubi_cycle_005[,-c(3:5,7)]
```

```{r}
as.matrix(ubi_cycle_005[,-c(3:5,7)]) -> ubi_cycle_m
```

```{r}
#heatmap(ubi_cycle_m)

```

# Yifans data to compare

```{r}
yifan <-fread(file = "yifan_bulk_RNAseq_96_VS_104.csv", header=TRUE)
allyifan <-fread(file = "all_table_score_periodic.csv", header=TRUE)
```
